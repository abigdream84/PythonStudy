#!/usr/bin/env python
#coding:UTF-8

from ebank.utility.MySqlHelper import MySqlHelper

class account(object):
    
    def __init__(self):
        self.__helper = MySqlHelper()
    
    def __getId(self,user_id):
        sql = 'select id from account where id = %s' 
        try:
            user_id = self.__helper.select(sql,user_id)   
        except Exception as e:
            print(e)
        return user_id
    
    def __getPwd(self,user_id):
        sql = 'select passwd from account where id = %s'
        try:
            user_pwd = self.__helper.select(sql,user_id)
        except Exception as e:
            print(e)
        return user_pwd
    
    def __getFail(self,user_id):
        sql = 'select fail_account from account where id = %s '
        try:
            fail_count = self.__helper.select(sql,user_id)[0][0]
            print(fail_count)
            print(type(fail_count))
        except Exception as e:
            print(e)
        return fail_count
    
    def __updFail(self,user_id,fail_count):
        sql = 'update account set fail_account = %s where id = %s'
        params = (fail_count, user_id)
        try:
            self.__helper.update(sql,params)
        except Exception as e:
            print(e)
     
    def __getStat(self,user_id):
        sql = 'select status from account where id = %s '
        try:
            status = self.__helper.select(sql,user_id)
        except Exception as e:
            print(e)
        return status
    
    def lockUser(self,user_id):
        sql = 'update account set status = False where id = %s'
        try:
            self.__helper.update(sql,user_id)
        except Exception as e:
            print(e)   
    
    def changeFail(self,user_id):
        fail_count = self.__getFail(user_id)
        if fail_count <= 1:
            fail_count += 1
            self.__updFail(user_id, fail_count)
            print(fail_count)
            print(type(fail_count))
        else:
            fail_count += 1
            self.__updFail(user_id, fail_count)
            self.lockUser(user_id)
          
    def chkUser(self,user_id):
        if self.__getId(user_id):
            return True
        else:
            print('User is not exist! Try again!')
            return False
        
    def chkPwd(self,user_id,user_pwd):
        if self.__getStat(user_id) == False:
            print('Account is locked!')
            return False       
        elif user_pwd == self.__getPwd(user_id):
            return True
        else:
            self.changeFail(user_id)
            print('Login fail! Try again!')
            return False


'''   
acc = account()
acc.changeFail('0004')
'''
    
    

